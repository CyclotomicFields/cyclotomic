var searchIndex = JSON.parse('{\
"arithmetic_benchmark":{"doc":"","i":[[5,"main","arithmetic_benchmark","",null,[[]]]],"p":[]},\
"cyclobench":{"doc":"","i":[[3,"Opts","cyclobench","",null,null],[12,"gap_out","","",0,null],[12,"num_tests","","",0,null],[12,"threads","","",0,null],[12,"lower_bound_order","","",0,null],[12,"upper_bound_order","","",0,null],[5,"write_gap_cycs","","",null,[[["vec",3],["string",3]],["result",6]]],[5,"main","","",null,[[]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"vzip","","",0,[[]]],[11,"into_app","","",0,[[],["app",3]]],[11,"augment_clap","","",0,[[["app",3]],["app",3]]],[11,"from_arg_matches","","",0,[[["argmatches",3]]]]],"p":[[3,"Opts"]]},\
"cyclotomic":{"doc":"","i":[[0,"primes","cyclotomic","",null,null],[0,"prime_table","cyclotomic::primes","",null,null],[3,"PrimeTableReader","cyclotomic::primes::prime_table","",null,null],[12,"directory_path","","",0,null],[6,"ZPlus","","",null,null],[11,"new","","",0,[[["path",3]],["primetablereader",3]]],[11,"first_million_from_file","","",0,[[],[["primetablereader",3],["option",4]]]],[11,"first_million_primes","","",0,[[],["vec",3]]],[11,"read_primes_from_table","","",0,[[["string",3]],["vec",3]]],[11,"read_primes_from_csv","","",0,[[["string",3]],["vec",3]]],[0,"primes","cyclotomic::primes","",null,null],[3,"Primes","cyclotomic::primes::primes","",null,null],[12,"primes","","",1,null],[6,"R","","",null,null],[6,"ZPlus","","",null,null],[6,"Z","","",null,null],[11,"new","","",1,[[["vec",3]],["primes",3]]],[11,"new_subset","","",1,[[["vec",3]],["primes",3]]],[11,"assert_sorted_ascending","","",1,[[["vec",3]]]],[11,"to_vec","","",1,[[],["vec",3]]],[11,"first_n","","",1,[[],[["option",4],["primes",3]]]],[11,"pi_prime","","",1,[[],["option",4]]],[11,"range","","",1,[[],[["option",4],["primes",3]]]],[11,"pi_range","","",1,[[],["option",4]]],[11,"len","","",1,[[]]],[11,"nth","","",1,[[],["option",4]]],[0,"prime_counter","cyclotomic","",null,null],[0,"prime_counter","cyclotomic::prime_counter","",null,null],[6,"R","cyclotomic::prime_counter::prime_counter","",null,null],[6,"ZPlus","","",null,null],[8,"PrimeCounter","","",null,null],[10,"pi","","",2,[[]]],[0,"legendre","cyclotomic::prime_counter","",null,null],[3,"Legendre","cyclotomic::prime_counter::legendre","",null,null],[12,"primes","","",3,null],[6,"R","","",null,null],[6,"ZPlus","","",null,null],[6,"Z","","",null,null],[11,"new","","",3,[[["primes",3]],["legendre",3]]],[11,"pi_prime","","",3,[[["primes",3]]]],[11,"legendre_sum","","",3,[[["vec",3]]]],[11,"legendre_sum_phi","","",3,[[]]],[0,"meissel","cyclotomic::prime_counter","",null,null],[3,"Meissel","cyclotomic::prime_counter::meissel","",null,null],[12,"primes","","",4,null],[12,"legendre","","",4,null],[6,"R","","",null,null],[6,"ZPlus","","",null,null],[6,"Z","","",null,null],[11,"new","","",4,[[["primes",3]],["meissel",3]]],[11,"pi_prime","","",4,[[["primes",3]]]],[0,"lehmer","cyclotomic::prime_counter","",null,null],[3,"Lehmer","cyclotomic::prime_counter::lehmer","",null,null],[12,"primes","","",5,null],[12,"legendre","","",5,null],[6,"R","","",null,null],[6,"ZPlus","","",null,null],[6,"Z","","",null,null],[11,"new","","",5,[[["primes",3]],["lehmer",3]]],[11,"pi_prime","","",5,[[["primes",3]]]],[0,"divisors","cyclotomic","",null,null],[0,"divisors","cyclotomic::divisors","",null,null],[6,"Z","cyclotomic::divisors::divisors","",null,null],[8,"Divisors","","",null,null],[10,"divisors","","",6,[[["bigint",3]],[["bigint",3],["vec",3]]]],[10,"divisors_without_one","","",6,[[["bigint",3]],[["bigint",3],["vec",3]]]],[0,"library_divisors","cyclotomic::divisors","",null,null],[3,"LibraryDivisors","cyclotomic::divisors::library_divisors","",null,null],[6,"Z","","",null,null],[11,"new","","",7,[[],["librarydivisors",3]]],[0,"euclid","cyclotomic::divisors","",null,null],[3,"Euclid","cyclotomic::divisors::euclid","",null,null],[6,"Z","","",null,null],[11,"new","","",8,[[],["euclid",3]]],[11,"extended_euclidean_augmented_matrix_result_rows","","",8,[[["bigint",3]]]],[11,"gcd","","",8,[[["bigint",3]],["bigint",3]]],[11,"multiplicative_inverse_mod_n","","",8,[[["bigint",3]],[["option",4],["bigint",3]]]],[11,"multiplicative_inverse_mod_polynomial","","",8,[[["polynomial",3]],[["option",4],["polynomial",3]]]],[0,"prime_factors","cyclotomic","",null,null],[0,"prime_factorize","cyclotomic::prime_factors","",null,null],[6,"Z","cyclotomic::prime_factors::prime_factorize","",null,null],[8,"PrimeFactorize","","",null,null],[10,"prime_factors","","",9,[[["bigint",3]],[["bigint",3],["vec",3]]]],[0,"recursive_prime_factorize","cyclotomic::prime_factors","",null,null],[3,"RecursivePrimeFactorize","cyclotomic::prime_factors::recursive_prime_factorize","",null,null],[12,"divisors_strategy","","",10,null],[6,"Z","","",null,null],[11,"new","","",10,[[],["recursiveprimefactorize",3]]],[11,"default","","",10,[[],[["recursiveprimefactorize",3],["librarydivisors",3]]]],[0,"coprime_counter","cyclotomic","",null,null],[0,"coprime_counter","cyclotomic::coprime_counter","",null,null],[6,"Z","cyclotomic::coprime_counter::coprime_counter","",null,null],[8,"CoprimeCounter","","",null,null],[10,"phi","","",11,[[["bigint",3]],["bigint",3]]],[0,"hybrid_coprime_counter","cyclotomic::coprime_counter","",null,null],[3,"HybridCoprimeCounter","cyclotomic::coprime_counter::hybrid_coprime_counter","",null,null],[12,"prime_factorizer","","",12,null],[6,"R","","",null,null],[6,"Q","","",null,null],[6,"Z","","",null,null],[11,"new","","",12,[[],["hybridcoprimecounter",3]]],[11,"default","","",12,[[],[["recursiveprimefactorize",3],["hybridcoprimecounter",3]]]],[0,"polynomial","cyclotomic","",null,null],[0,"polynomial","cyclotomic::polynomial","",null,null],[3,"Polynomial","cyclotomic::polynomial::polynomial","",null,null],[12,"coefficients","","",13,null],[6,"Z","","",null,null],[6,"Q","","",null,null],[11,"degree","","",13,[[]]],[11,"leading_term_coefficient","","",13,[[],["bigrational",6]]],[11,"constant_term_coefficient","","",13,[[],["bigrational",6]]],[11,"is_monic","","",13,[[]]],[0,"construct","cyclotomic::polynomial","",null,null],[11,"new","cyclotomic::polynomial::polynomial","",13,[[["vec",3],["bigrational",6]],["polynomial",3]]],[11,"from_small_fractions","","",13,[[["vec",3]],["polynomial",3]]],[11,"truncate_coefficients","","",13,[[["vec",3]]]],[0,"substitute","cyclotomic::polynomial","",null,null],[11,"substitute","cyclotomic::polynomial::polynomial","",13,[[["bigrational",6]],["bigrational",6]]],[0,"is_irreducible","cyclotomic::polynomial","",null,null],[11,"is_irreducible_over_q","cyclotomic::polynomial::polynomial","",13,[[["primes",3]],["option",4]]],[11,"is_irreducible_by_eisenstein_criterion","","",13,[[["vec",3]]]],[11,"convert_to_integer_coefficients","","",13,[[],["polynomial",3]]],[11,"try_integer_coefficients","","",13,[[],[["bigint",3],["vec",3]]]],[0,"add","cyclotomic::polynomial","",null,null],[11,"add_mut","cyclotomic::polynomial::polynomial","",13,[[]]],[0,"subtract","cyclotomic::polynomial","",null,null],[11,"sub_mut","cyclotomic::polynomial::polynomial","",13,[[]]],[11,"sub","","",13,[[],["polynomial",3]]],[0,"negate","cyclotomic::polynomial","",null,null],[11,"neg","cyclotomic::polynomial::polynomial","",13,[[],["polynomial",3]]],[0,"multiply","cyclotomic::polynomial","",null,null],[11,"coefficient_mul_naive","cyclotomic::polynomial::polynomial","",13,[[["vec",3]],[["vec",3],["bigrational",6]]]],[11,"mul_mut_naive","","",13,[[]]],[11,"mul_mut_convolutions","","",13,[[]]],[11,"mul_mut_fft","","",13,[[]]],[11,"mul","","",13,[[],["polynomial",3]]],[0,"divide","cyclotomic::polynomial","",null,null],[11,"div","cyclotomic::polynomial::polynomial","",13,[[]]],[0,"display","cyclotomic::polynomial","",null,null],[11,"to_string","cyclotomic::polynomial::polynomial","",13,[[],["string",3]]],[0,"fields","cyclotomic","Implementations of field operations in cyclotomic fields.",null,null],[0,"sparse","cyclotomic::fields","Sparse implementation using hash maps.",null,null],[3,"Number","cyclotomic::fields::sparse","Represents a polynomial in the `order`th root of unity.",null,null],[12,"order","","",14,null],[12,"coeffs","","",14,null],[4,"Sign","","",null,null],[13,"Plus","","",15,null],[13,"Minus","","",15,null],[5,"print_gap","","",null,[[["number",3]],["string",3]]],[5,"are_coprime","","",null,[[]]],[5,"phi","","",null,[[]]],[5,"get_same_coeff","","",null,[[["number",3]],[["bigrational",6],["option",4]]]],[5,"math_mod","","",null,[[]]],[5,"add_single","","",null,[[["bigrational",6],["sign",4],["fxhashmap",6]]]],[5,"is_zero","","",null,[[["number",3]]]],[5,"count_powers","","",null,[[["vec",3]],["vec",3]]],[5,"random_rational","","",null,[[],["bigrational",6]]],[5,"random_cyclotomic","","",null,[[],["number",3]]],[0,"add","","",null,null],[0,"basis","","",null,null],[5,"try_reduce","cyclotomic::fields::sparse::basis","",null,[[["number",3]]]],[5,"convert_to_base","","Writes a cyclotomic in the GAP basis (keeps field theâ€¦",null,[[["number",3]],["number",3]]],[0,"galois","cyclotomic::fields::sparse","",null,null],[5,"apply_automorphism","cyclotomic::fields::sparse::galois","",null,[[["number",3]],["number",3]]],[0,"mul","cyclotomic::fields::sparse","",null,null],[6,"ExpCoeffMap","","",null,null],[11,"new","","",14,[[["fxhashmap",6]],["number",3]]],[11,"increase_order_to","","",14,[[]]],[11,"match_orders","","",14,[[["number",3]]]],[6,"Z","cyclotomic::fields","",null,null],[6,"Q","","",null,null],[8,"AdditiveGroup","","",null,null],[10,"add","","Adds z to self in place, so self = self + z",16,[[]]],[10,"add_invert","","",16,[[]]],[8,"MultiplicativeGroup","","",null,null],[10,"mul","","Multiplies self by z in place, so self = self * z",17,[[]]],[10,"mul_invert","","Inverts self in place.",17,[[]]],[8,"FieldElement","","Provides operations for fields. Expected to satisfy theâ€¦",null,null],[10,"eq","","Equality, but can shuffle coefficients around and simplifyâ€¦",18,[[]]],[8,"CyclotomicFieldElement","","Provides convenience functions specific to cyclotomicâ€¦",null,null],[10,"e","","Returns $\\\\zeta_n$^k.",19,[[]]],[10,"scalar_mul","","Multiplies in-place by scalar. Recall thatâ€¦",19,[[["bigrational",6]]]],[10,"zero_order","","Gives zero expressed as an element of $\\\\mathbb{Q}(\\\\zeta_n)$",19,[[]]],[10,"one_order","","Gives one expressed as an element of $\\\\mathbb{Q}(\\\\zeta_n)$",19,[[]]],[11,"from","cyclotomic::primes::prime_table","",0,[[]]],[11,"into","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"vzip","","",0,[[]]],[11,"from","cyclotomic::primes::primes","",1,[[]]],[11,"into","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"vzip","","",1,[[]]],[11,"equivalent","","",1,[[]]],[11,"from","cyclotomic::prime_counter::legendre","",3,[[]]],[11,"into","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"vzip","","",3,[[]]],[11,"from","cyclotomic::prime_counter::meissel","",4,[[]]],[11,"into","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"vzip","","",4,[[]]],[11,"from","cyclotomic::prime_counter::lehmer","",5,[[]]],[11,"into","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"vzip","","",5,[[]]],[11,"from","cyclotomic::divisors::library_divisors","",7,[[]]],[11,"into","","",7,[[]]],[11,"try_from","","",7,[[],["result",4]]],[11,"try_into","","",7,[[],["result",4]]],[11,"borrow","","",7,[[]]],[11,"borrow_mut","","",7,[[]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"vzip","","",7,[[]]],[11,"from","cyclotomic::divisors::euclid","",8,[[]]],[11,"into","","",8,[[]]],[11,"try_from","","",8,[[],["result",4]]],[11,"try_into","","",8,[[],["result",4]]],[11,"borrow","","",8,[[]]],[11,"borrow_mut","","",8,[[]]],[11,"type_id","","",8,[[],["typeid",3]]],[11,"vzip","","",8,[[]]],[11,"from","cyclotomic::prime_factors::recursive_prime_factorize","",10,[[]]],[11,"into","","",10,[[]]],[11,"try_from","","",10,[[],["result",4]]],[11,"try_into","","",10,[[],["result",4]]],[11,"borrow","","",10,[[]]],[11,"borrow_mut","","",10,[[]]],[11,"type_id","","",10,[[],["typeid",3]]],[11,"vzip","","",10,[[]]],[11,"from","cyclotomic::coprime_counter::hybrid_coprime_counter","",12,[[]]],[11,"into","","",12,[[]]],[11,"try_from","","",12,[[],["result",4]]],[11,"try_into","","",12,[[],["result",4]]],[11,"borrow","","",12,[[]]],[11,"borrow_mut","","",12,[[]]],[11,"type_id","","",12,[[],["typeid",3]]],[11,"vzip","","",12,[[]]],[11,"from","cyclotomic::polynomial::polynomial","",13,[[]]],[11,"into","","",13,[[]]],[11,"to_owned","","",13,[[]]],[11,"clone_into","","",13,[[]]],[11,"to_string","","",13,[[],["string",3]]],[11,"try_from","","",13,[[],["result",4]]],[11,"try_into","","",13,[[],["result",4]]],[11,"borrow","","",13,[[]]],[11,"borrow_mut","","",13,[[]]],[11,"type_id","","",13,[[],["typeid",3]]],[11,"vzip","","",13,[[]]],[11,"from","cyclotomic::fields::sparse","",14,[[]]],[11,"into","","",14,[[]]],[11,"to_owned","","",14,[[]]],[11,"clone_into","","",14,[[]]],[11,"try_from","","",14,[[],["result",4]]],[11,"try_into","","",14,[[],["result",4]]],[11,"borrow","","",14,[[]]],[11,"borrow_mut","","",14,[[]]],[11,"type_id","","",14,[[],["typeid",3]]],[11,"vzip","","",14,[[]]],[11,"from","","",15,[[]]],[11,"into","","",15,[[]]],[11,"try_from","","",15,[[],["result",4]]],[11,"try_into","","",15,[[],["result",4]]],[11,"borrow","","",15,[[]]],[11,"borrow_mut","","",15,[[]]],[11,"type_id","","",15,[[],["typeid",3]]],[11,"vzip","","",15,[[]]],[11,"equivalent","","",15,[[]]],[11,"pi","cyclotomic::primes::primes","",1,[[]]],[11,"pi","cyclotomic::prime_counter::legendre","",3,[[]]],[11,"pi","cyclotomic::prime_counter::meissel","",4,[[]]],[11,"pi","cyclotomic::prime_counter::lehmer","",5,[[]]],[11,"divisors","cyclotomic::divisors::library_divisors","",7,[[["bigint",3]],[["bigint",3],["vec",3]]]],[11,"divisors_without_one","","",7,[[["bigint",3]],[["bigint",3],["vec",3]]]],[11,"prime_factors","cyclotomic::prime_factors::recursive_prime_factorize","",10,[[["bigint",3]],[["bigint",3],["vec",3]]]],[11,"phi","cyclotomic::coprime_counter::hybrid_coprime_counter","",12,[[["bigint",3]],["bigint",3]]],[11,"add","cyclotomic::fields::sparse","Simplest possible - term wise addition using hashing.",14,[[]]],[11,"add_invert","","",14,[[]]],[11,"mul","","Multiplies term by term, not bothering to do anythingâ€¦",14,[[]]],[11,"mul_invert","","Gives the inverse of $z$ using the product of Galoisâ€¦",14,[[]]],[11,"eq","","",14,[[]]],[11,"e","","",14,[[]]],[11,"scalar_mul","","",14,[[["bigrational",6]]]],[11,"zero_order","","",14,[[],["number",3]]],[11,"one_order","","",14,[[],["number",3]]],[11,"from","cyclotomic::polynomial::polynomial","",13,[[["vec",3],["bigint",3]]]],[11,"from","","",13,[[["vec",3]]]],[11,"clone","","",13,[[],["polynomial",3]]],[11,"clone","cyclotomic::fields::sparse","",14,[[],["number",3]]],[11,"eq","cyclotomic::primes::primes","",1,[[["primes",3]]]],[11,"ne","","",1,[[["primes",3]]]],[11,"eq","cyclotomic::polynomial::polynomial","",13,[[]]],[11,"eq","cyclotomic::fields::sparse","",15,[[["sign",4]]]],[11,"fmt","cyclotomic::primes::primes","",1,[[["formatter",3]],["result",6]]],[11,"fmt","cyclotomic::polynomial::polynomial","",13,[[["formatter",3]],["result",6]]],[11,"fmt","cyclotomic::fields::sparse","",14,[[["formatter",3]],["result",6]]],[11,"fmt","cyclotomic::polynomial::polynomial","",13,[[["formatter",3]],["result",6]]],[11,"div","","",13,[[]]],[11,"sub","","",13,[[]]],[11,"add","","",13,[[]]],[11,"mul","","",13,[[]]],[11,"mul","","",13,[[]]],[11,"neg","","",13,[[]]],[11,"add_assign","","",13,[[]]],[11,"sub_assign","","",13,[[]]],[11,"mul_assign","","",13,[[]]],[11,"zero","","",13,[[]]],[11,"is_zero","","",13,[[]]],[11,"one","","",13,[[]]],[11,"is_one","","",13,[[]]]],"p":[[3,"PrimeTableReader"],[3,"Primes"],[8,"PrimeCounter"],[3,"Legendre"],[3,"Meissel"],[3,"Lehmer"],[8,"Divisors"],[3,"LibraryDivisors"],[3,"Euclid"],[8,"PrimeFactorize"],[3,"RecursivePrimeFactorize"],[8,"CoprimeCounter"],[3,"HybridCoprimeCounter"],[3,"Polynomial"],[3,"Number"],[4,"Sign"],[8,"AdditiveGroup"],[8,"MultiplicativeGroup"],[8,"FieldElement"],[8,"CyclotomicFieldElement"]]},\
"inversion_benchmark":{"doc":"","i":[[5,"main","inversion_benchmark","",null,[[]]]],"p":[]}\
}');
addSearchOptions(searchIndex);initSearch(searchIndex);